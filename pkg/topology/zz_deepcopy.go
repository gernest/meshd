// +build !ignore_autogenerated

// Code generated by deepcopy-gen. DO NOT EDIT.

package topology

import (
	v1alpha3 "github.com/servicemeshinterface/smi-sdk-go/pkg/apis/specs/v1alpha3"
	corev1 "k8s.io/api/core/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Key) DeepCopyInto(out *Key) {
	*out = *in
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Key.
func (in *Key) DeepCopy() *Key {
	if in == nil {
		return nil
	}
	out := new(Key)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Pod) DeepCopyInto(out *Pod) {
	*out = *in
	if in.OwnerReferences != nil {
		in, out := &in.OwnerReferences, &out.OwnerReferences
		*out = make([]v1.OwnerReference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ContainerPorts != nil {
		in, out := &in.ContainerPorts, &out.ContainerPorts
		*out = make([]corev1.ContainerPort, len(*in))
		copy(*out, *in)
	}
	if in.SourceOf != nil {
		in, out := &in.SourceOf, &out.SourceOf
		*out = make([]ServiceTrafficTargetKey, len(*in))
		copy(*out, *in)
	}
	if in.DestinationOf != nil {
		in, out := &in.DestinationOf, &out.DestinationOf
		*out = make([]ServiceTrafficTargetKey, len(*in))
		copy(*out, *in)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Pod.
func (in *Pod) DeepCopy() *Pod {
	if in == nil {
		return nil
	}
	out := new(Pod)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Service) DeepCopyInto(out *Service) {
	*out = *in
	if in.Selector != nil {
		in, out := &in.Selector, &out.Selector
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Ports != nil {
		in, out := &in.Ports, &out.Ports
		*out = make([]corev1.ServicePort, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Pods != nil {
		in, out := &in.Pods, &out.Pods
		*out = make([]Key, len(*in))
		copy(*out, *in)
	}
	if in.TrafficTargets != nil {
		in, out := &in.TrafficTargets, &out.TrafficTargets
		*out = make([]ServiceTrafficTargetKey, len(*in))
		copy(*out, *in)
	}
	if in.TrafficSplits != nil {
		in, out := &in.TrafficSplits, &out.TrafficSplits
		*out = make([]Key, len(*in))
		copy(*out, *in)
	}
	if in.BackendOf != nil {
		in, out := &in.BackendOf, &out.BackendOf
		*out = make([]Key, len(*in))
		copy(*out, *in)
	}
	if in.Errors != nil {
		in, out := &in.Errors, &out.Errors
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Service.
func (in *Service) DeepCopy() *Service {
	if in == nil {
		return nil
	}
	out := new(Service)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServiceTrafficTarget) DeepCopyInto(out *ServiceTrafficTarget) {
	*out = *in
	out.Service = in.Service
	if in.Sources != nil {
		in, out := &in.Sources, &out.Sources
		*out = make([]ServiceTrafficTargetSource, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	in.Destination.DeepCopyInto(&out.Destination)
	if in.Rules != nil {
		in, out := &in.Rules, &out.Rules
		*out = make([]TrafficSpec, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Errors != nil {
		in, out := &in.Errors, &out.Errors
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServiceTrafficTarget.
func (in *ServiceTrafficTarget) DeepCopy() *ServiceTrafficTarget {
	if in == nil {
		return nil
	}
	out := new(ServiceTrafficTarget)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServiceTrafficTargetDestination) DeepCopyInto(out *ServiceTrafficTargetDestination) {
	*out = *in
	if in.Ports != nil {
		in, out := &in.Ports, &out.Ports
		*out = make([]corev1.ServicePort, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Pods != nil {
		in, out := &in.Pods, &out.Pods
		*out = make([]Key, len(*in))
		copy(*out, *in)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServiceTrafficTargetDestination.
func (in *ServiceTrafficTargetDestination) DeepCopy() *ServiceTrafficTargetDestination {
	if in == nil {
		return nil
	}
	out := new(ServiceTrafficTargetDestination)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServiceTrafficTargetKey) DeepCopyInto(out *ServiceTrafficTargetKey) {
	*out = *in
	out.Service = in.Service
	out.TrafficTarget = in.TrafficTarget
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServiceTrafficTargetKey.
func (in *ServiceTrafficTargetKey) DeepCopy() *ServiceTrafficTargetKey {
	if in == nil {
		return nil
	}
	out := new(ServiceTrafficTargetKey)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServiceTrafficTargetSource) DeepCopyInto(out *ServiceTrafficTargetSource) {
	*out = *in
	if in.Pods != nil {
		in, out := &in.Pods, &out.Pods
		*out = make([]Key, len(*in))
		copy(*out, *in)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServiceTrafficTargetSource.
func (in *ServiceTrafficTargetSource) DeepCopy() *ServiceTrafficTargetSource {
	if in == nil {
		return nil
	}
	out := new(ServiceTrafficTargetSource)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Topology) DeepCopyInto(out *Topology) {
	*out = *in
	if in.Services != nil {
		in, out := &in.Services, &out.Services
		*out = make(map[Key]*Service, len(*in))
		for key, val := range *in {
			var outVal *Service
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(Service)
				(*in).DeepCopyInto(*out)
			}
			(*out)[key] = outVal
		}
	}
	if in.Pods != nil {
		in, out := &in.Pods, &out.Pods
		*out = make(map[Key]*Pod, len(*in))
		for key, val := range *in {
			var outVal *Pod
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(Pod)
				(*in).DeepCopyInto(*out)
			}
			(*out)[key] = outVal
		}
	}
	if in.ServiceTrafficTargets != nil {
		in, out := &in.ServiceTrafficTargets, &out.ServiceTrafficTargets
		*out = make(map[ServiceTrafficTargetKey]*ServiceTrafficTarget, len(*in))
		for key, val := range *in {
			var outVal *ServiceTrafficTarget
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(ServiceTrafficTarget)
				(*in).DeepCopyInto(*out)
			}
			(*out)[key] = outVal
		}
	}
	if in.TrafficSplits != nil {
		in, out := &in.TrafficSplits, &out.TrafficSplits
		*out = make(map[Key]*TrafficSplit, len(*in))
		for key, val := range *in {
			var outVal *TrafficSplit
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(TrafficSplit)
				(*in).DeepCopyInto(*out)
			}
			(*out)[key] = outVal
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Topology.
func (in *Topology) DeepCopy() *Topology {
	if in == nil {
		return nil
	}
	out := new(Topology)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TrafficSpec) DeepCopyInto(out *TrafficSpec) {
	*out = *in
	if in.HTTPRouteGroup != nil {
		in, out := &in.HTTPRouteGroup, &out.HTTPRouteGroup
		*out = new(v1alpha3.HTTPRouteGroup)
		(*in).DeepCopyInto(*out)
	}
	if in.TCPRoute != nil {
		in, out := &in.TCPRoute, &out.TCPRoute
		*out = new(v1alpha3.TCPRoute)
		(*in).DeepCopyInto(*out)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TrafficSpec.
func (in *TrafficSpec) DeepCopy() *TrafficSpec {
	if in == nil {
		return nil
	}
	out := new(TrafficSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TrafficSplit) DeepCopyInto(out *TrafficSplit) {
	*out = *in
	out.Service = in.Service
	if in.Backends != nil {
		in, out := &in.Backends, &out.Backends
		*out = make([]TrafficSplitBackend, len(*in))
		copy(*out, *in)
	}
	if in.Rules != nil {
		in, out := &in.Rules, &out.Rules
		*out = make([]TrafficSpec, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Incoming != nil {
		in, out := &in.Incoming, &out.Incoming
		*out = make([]Key, len(*in))
		copy(*out, *in)
	}
	if in.Errors != nil {
		in, out := &in.Errors, &out.Errors
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TrafficSplit.
func (in *TrafficSplit) DeepCopy() *TrafficSplit {
	if in == nil {
		return nil
	}
	out := new(TrafficSplit)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TrafficSplitBackend) DeepCopyInto(out *TrafficSplitBackend) {
	*out = *in
	out.Service = in.Service
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TrafficSplitBackend.
func (in *TrafficSplitBackend) DeepCopy() *TrafficSplitBackend {
	if in == nil {
		return nil
	}
	out := new(TrafficSplitBackend)
	in.DeepCopyInto(out)
	return out
}
